# Deployment Check Policy Template
#
# A contrived policy for training purposes.
#
# Deployment-scoped so as to make it possible for students to run the policy on their own deployment.
# The requirements for this policy are as follows:
# - Find running instances in user-specified deployment.
# - Exclude any instances that are tagged with the user-specified tags - if any.
# - Optionally allow the user to specify if the instances should be stopped.
# - The report should show the cloud name for each instance that was found.
#
#

name "Deployment Servers Stop Policy"
rs_pt_ver 20180301
type "policy"
short_description "Reports running servers in a deployment and optionally stops them."
severity "medium" 
category "Operational"

# what permissions does this policy (and by extension the user applying the policy) need for this policy to work.
permission "index_permissions" do
  resources "rs_cm.deployments","rs_cm.clouds", "rs_cm.servers"
  actions   "rs_cm.index"
end

permission "action_permissions" do
  resources "rs_cm.instances"
  actions   "rs_cm.*"  # Need to be able to index, stop, delete, etc
end

permission "tag_permissions" do
  label "Retrieve Tags"
  actions "rs_cm.by_resource"
  resources "rs_cm.tags"
end

# user inputs
parameter "param_deployment_name" do
  type "string"
  label "Name of deployment to check."
  allowed_pattern /^.+$/  # Makes this input required
  constraint_description "Must enter the name of a deployment to check."
end

parameter "param_exclude_tags" do
  type "list"
  label "List of one or more RightScale tags that will exclude the server from actions being taken."
end

parameter "param_action" do
  type "string"
  label "Policy action"
  allowed_values "Email only", "Email and stop servers"
end

parameter "param_email" do
  type "list"
  label "Email addresses who should receive report"
end

## DATA SOURCES ###

### resource based data sources ###
# Resource based data sources are directly related to the RightScale resources APIs.

# Get the deployment of the given name.
# NOTE: name filters in the RightScale API are partial match, so if the provided deployment name is a substring of multiple deployments' names, 
# this resource will contain all the matching deployments.
resources "deployments", type: "rs_cm.deployments" do
  filter do
    name eq: $param_deployment_name
  end
end

# Get the servers in the deployment.
# NOTE: if the deployment name given by the user matches more than one deployment, this resource will contain the servers for all the matching deployments.
resources "servers", type: "rs_cm.servers" do
  iterate @deployments
  tags none($param_exclude_tags)  # This tags directive makes it very easy to cull datasources based on tags.
  filter do
    deployment_href eq: href(iter_item)
  end
end

# Get clouds - needed for instance grab
resources "clouds", type: "rs_cm.clouds" 

## chained data sources ##
# Data sources can be based on other data sources.

# A somewhat contrived example but handy nonetheless.
# This datasource returns only the cloud attributes we care about.
datasource "ds_clouds" do
  iterate @clouds
  field "href", href(iter_item)
  field "cloud_type", val(iter_item, "cloud_type")
  field "name", val(iter_item,'name')
end

## javascript based data sources ##
# Data sources can created by using javascript to manipulate other data.

# We need to collate some information and build a table of the form:
# server name : running instance href : cloud name 
# So using javascript to do this.
datasource "ds_deployment_running_servers" do
  run_script $js_deployment_running_servers, $ds_clouds, @servers
end

# Create a table of clouds and the number of found instances.
# Returns all servers in the deployment regardless of state.
script "js_deployment_running_servers", type: "javascript" do
  parameters "ds_clouds", "servers"
  result "deployment_running_servers"
  code <<-EOS
// This is the eventual output list of deployment servers.
var deployment_running_servers = [];
  
// Build a cloud href -> type hash
var cloud_hash = {}
for (var i = 0; i < ds_clouds.length; i++) {
  var ds_cloud = ds_clouds[i]
  var cloud_href = ds_cloud["href"]
  var cloud_type = ds_cloud["cloud_type"]
  var cloud_name = ds_cloud["name"]
  cloud_hash[cloud_href] = { "cloud_type": cloud_type, "cloud_name": cloud_name }
}  
  
// Build the array of json objects containing the server information as described above for running servers in deployment.
var server_json = {}
for (var i = 0; i < servers.length; i++) {
  var server = servers[i]
  
  // All servers have a name and a state
  var server_name = server["name"]
  var server_state = server["state"]
    
  // Only want to return what are essentially running servers.
  if ((server_state == "operational") || (server_state == "running") || (server_state == "booting") || (server_state == "stranded")) {

    // Get the href for the running instance of the server.
    var server_instance_href = ""
    server.links.forEach(function(link) {
      if (link.rel == "current_instance") {
        server_instance_href = link.href
      }
    })
    
    // Get the cloud name by extracting the cloud ID from the instance href and then using the cloud name hash created above.
    var server_cloud_id = server_instance_href.split("/")[3]  // The cloud ID is embedded in the instance ID of the form "/api/clouds/1/instances/ABCDE"
    server_cloud_name = cloud_hash["/api/clouds/"+server_cloud_id]["cloud_name"]
      
    // build the json object
    server_json = { "server_name": server_name, "server_instance_href": server_instance_href, "server_cloud_name": server_cloud_name, "server_state": server_state }
      
    // push object onto the output array
    deployment_running_servers.push(server_json)
  }
}
EOS
end

# The policy declaration.
# This is where the data is checked for anomalies and actions taken.
policy "pol_deployment_check" do
  
  # By the fact that the java script datasource above creates a list containing only servers that are in some way or another "running", 
  # then we just need to check if we got a list at all.
  # NOTE: There is a "validate_each" directive used to look at each "item" in the array
  validate $ds_deployment_running_servers do
    
    # By definition if we get this far, we have servers that can be stopped.
    # If the user selected the Email Only option, this check fails and we execute email-only related actions.
    check ne($param_action, "Email only")
    
    # Send the report via email
    escalate $email_server_report
        
    # If an incident that was open closes for whatever reason the resolution is executed.
    # For example, if the policy found running servers and then the next time it ran, all servers were not running, this would cause resolve to be invoked.
    resolve $send_resolution_email
    
    # The report is generated and presented in the policy's Incidents UI.
    # It's also the default format for any emails sent by an escalation action.
    # The "data" keyword object contains those items that failed a check above.
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): Policy Report for deployment \"{{ parameters.param_deployment_name }}\""
    detail_template <<-EOS
| Server Name | Cloud Name | Server State | Running Instance HREF |
| ----------- | ---------- | ------------ | --------------------- | 
{{ range data -}}
    | {{ .server_name }} | {{ .server_cloud_name }} | {{ .server_state }} | {{ .server_instance_href }} |
{{ end -}}
EOS
  end
  
  # If there were any servers identified  (i.e. the list of servers is not empty), then check if the user indicated whether or not
  # to stop the servers. 
  # If so, then stop the servers.
  validate $ds_deployment_running_servers do
    
    # If the user selected the stop servers option, this check will fail.
    check ne($param_action, "Email and stop servers")
    
    # Send the report via email
    escalate $email_server_report
    # This escalation stops the servers
    escalate $stop_servers
    # This sends the email indicating the servers were stopped.
    resolve $send_resolution_email
    
    # The report is generated and presented in the policy's Incidents UI.
    # It's also the default format for any emails sent by an escalation action.
    # The "data" keyword object contains those items that failed a check above.
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): Policy Report for deployment \"{{ parameters.param_deployment_name }}\""
    detail_template <<-EOS
| Server Name | Cloud Name | Server State | Running Instance HREF |
| ----------- | ---------- | ------------ | --------------------- | 
{{ range data -}}
    | {{ .server_name }} | {{ .server_cloud_name }} | {{ .server_state }} | {{ .server_instance_href }} |
{{ end -}}
EOS
  end
end

## Policy escalation declarations

# This escalation simply sends an email of the report
escalation "email_server_report" do
  # Let the identified folks know that running servers were found.
  email $param_email
end

# This escalation is invoked if the user indicated that the policy should actually stop the running servers.
escalation "stop_servers" do
  run "stop_instances", data
  resolve_incident  # This is a function that marks the resultant incident as resolved.
end

# Policy resolution declaration.
# Only runs if the incident changes from the "Open" state or resolve_incident function is executed.
resolution "send_resolution_email" do
  email $param_email do
    # It's best to keep the subjects the same within the policy so that they collate as email threads.
    subject_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): Policy Report for deployment \"{{ parameters.param_deployment_name }}\""
    body_template "No running servers in deployment \"{{ parameters.param_deployment_name }}\""
  end
end


# RightScale Cloud Language (RCL) used to take action.
define stop_instances($data) do
  foreach $item in $data do
    # Find the instance
    @instance = rs_cm.get(href: $item["server_instance_href"])
    # Stop the instance
    @instance.stop()
  end
end




